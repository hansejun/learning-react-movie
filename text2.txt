[ sort 메소드를 활용해 최신순 정렬하기 ]
- itmes.sort((a,b) => b.createdAt - a.createdAt)

[ filter 메소드를 활용해 아이템 삭제하기 ]
- items.filter((item) => item.id !== id);
- id와 같지 않은 것들로 만들어진 배열 생성

----------------------------------------------------
[ 배열 렌더링 ]

1) map 함수로 렌더링하기
  <ul>
    {items.map((item) => (
      <li key={item.id}>
        <Pokemon item={item} />
      </li>
    ))}
  </ul>

2) sort로 정렬하기

3) filter로 삭제하기 

4) 반드시 key prop을 주기
 
 ----------------------------------------------------
 [ fetch 사용해서 데이터 불러오기 ]

 export const getReviews = async () => {
  const response = await fetch("https://learn.codeit.kr/api/film-reviews");
  const body = await response.json();
  return body;
};
 
----------------------------------------------------
[ useEffect ]

1) 처음 한번만 실행하기

- useEffect(() => {
    // 실행할 코드
  }, []);

--> 컴포넌트가 처음 렌더링 되고 나면 리액트가 콜백 함수를 기억해뒀다가 실행합니다.
    그 이후로는 콜백 함수를 실행하지 않습니다.

2) 값이 바뀔 때마다 실행하기

- useEffect(() => {
    // 실행할 코드
  }, [dep1, dep2, dep3, ...]);

--> 컴포넌트가 처음 렌더링 되고 나면 리액트가 콜백 함수를 기억해뒀다가 실행합니다.
    그 이후로 렌더링 할 때는 디펜던시 리스트에 있는 값들을 확인해서
    하나라도 바뀌면  콜백 함수를 기억해뒀다가 실행합니다.
 
----------------------------------------------------
[ 페이지네이션 ]

1) 오프셋 기반의 페이지네이션
- 개수를 기준으로 데이터를 나눈다.
- 개수를 기준으로 하기 때문에 데이터를 받아오는 과정에서 추가/삭제가 이루어지면 원하지 않는 결과가 나올 수 있다.
- 20번째부터 30번째까지 가져와줘!
- ?offset=20&limit=10

2) 커서 기반의 페이지네이션
- 데이터를 가리키는 값. 지금까지 받아온 데이터에 표시를 하여 나눈다.
- 커서값:ddadwd 이후의 데이터 10개를 가져와줘!


----------------------------------------------------
[ 조건부 렌더링 ]
- 리액트의 boolean값을 렌더링하지 않는다는 기능을 활용

1) AND 연산자
<div>
  <button onClick={handleClick}>토글</button>
  {show && <p>보인다 👀</p>}
</div>

==> show의 값이 true면 <p>를 렌더링 
    false면 show를 렌더링한다.

2) OR 연산자
<div>
  <button onClick={handleClick}>토글</button>
  <hide || <p>보인다 👀</p>}
</div>

=> hide 값이 true 이면 렌더링 하지 않고, false 이면 렌더링 합니다.


-----------------------------------------------------------
[ form에서 useState 다루기 ]

const [values, setValues] = useState({
    title: "",
    rating: 0,
    content: "",
  });

const handleChange = (e) => {
  const { name, value } = e.target;
  setValues((current) => ({
    ...current,
    [name]: value,
}));};

-----------------------------------------------------------
[ 제어 컴포넌트 ]
- input의 value 값을 리액트에서 지정
- 리액트에서 사용하는 값과 실제 input 값이 항상 일치
- 주로 권장되는 방법

[ 비제어 컴포넌트 ]
- input의 value 값을 지정하지 않는 방법
- file input에서 사용

-----------------------------------------------------------
[ useRef ]
- DOM 노드를 참조할 때 useRef 함수로 Ref 객체를 만들고 이것의 current 프로퍼티를 활용한다.
- import { useRef } from 'react';
- const inputRef = useRef();

- 참조할 태그의 ref prop을 생성해 ref 객체를 할당한다.
- <button ref={inputRef}>버튼</button>

- ref 객체에서 DOM 노드를 참조할 땐 current 값이 있는지 확인해야한다.
- const inputNode = inputRef.current;
  if(!inputNode) return;

- 원하는 프로퍼티는 const { width,height } = imgNode; 이런식으로 참조한다.

*  ObjectURL 만들기
*  const objectURL = URL.createObjectURL(file);
*
*  ObjectURL 해제하기
*  URL.revokeObjectURL(objectURL);

-----------------------------------------------------------
[ 글 작성 ]
- formData 객체를 생성하여 사용한다. 

const formData = new FormData();
    formData.append("title", values.title);
    formData.append("rating", values.rating);
    formData.append("content", values.content);
    formData.append("imgFile", values.imgFile);

- 이것을 fetch 함수의 body에 넣어 POST request를 보낸다.

-----------------------------------------------------------
[ 리액트 Hook ]
- use로 시작되는 기능들을 hook이라고 한다.
- 내가 작성한 코드를 다른 프로그램에서 연결해서 그 값이나 기능을 사용하는 것
- useState / useEffect / useRef /useCallback 등 

[ Hook의 규칙 ]
- 반드시 리액트 컨포넌트 함수 안에서 사용해야한다.
- 컴포넌트 함수의 최상위에서만 사용한다.(반복문,조건문에서 사용불가)

[ useCallback ]
- 함수를 매번 새로 생성하는 것이 아니라 디펜던시 리스트가 변경될 때마다 함수를 생성 

[ Custom Hook ]
- 자주 사용하는 hook 코드들을 함수로 만들어 재사용
- use으로 시작해야한다.
- hooks 폴더 참조 

-----------------------------------------------------------
[ Context ]
- 많은 컴포넌트에서 사용하는 데이터를 반복적인 prop 전달(prop drilling) 없이 공유하는 방법

[ Context 만들기 ]
- createContext라는 함수를 통해 만들 수 있다.
- () 안에 기본값을 넣어줄 수도 있다.

- import { createContext } from 'react';
  const LocaleContext = createContext();

[ Context 적용하기 ]
- Context를 사용할 때에는 반드시 값을 공유할 범위를 정해야한다.
- 이때 범위는 Context 객체에 있는 Provider 라는 컴포넌트로 정해줄 수 있다.
- Provider의 value prop으로 공유할 값을 내려준다.

<LocaleContext.Provider value="en">
    ... Provider 안의 컴포넌트에서는 LocaleContext 사용가능
</LocaleContext.Provider>

[ Context 값 사용하기 ]
- useContext라는 Hook을 통해 사용할 수 있다.

- const locale = useContext(context이름);
- <p>{locale}</p>

-----------------------------------------------------------
[ gh-pages를 통해 publishing ]
- gh-pages는 github pages에 업로드 하게 해주는 패키지이다.
- npm i gh-pages

1) package.json에 아래와 같은 코드 추가
  - "Homepage":"https://[깃허브 username].github.io/[repository 이름]"
  - repository 이름은 git remote -v를 통해 확인가능 

2) script에 명령어 추가 
  - "deploy": "gh-pages -d build",
    "predeploy": "npm run build"
  - npm run deploy를 실행하면 predeploy가 자동으로 실행되고 deploy가 실행된다.
  - deploy의 역할은 build 폴더를 Hompage 주소의 웹사이트에 업로드 하는 것이다.
